/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUIs;

import DO.ClientObject;
import DO.ContactObject;
import DO.ObjectCollector;
import static Functions.Functions.createModalGui;
import static Functions.Functions.isGuiShowing;
import Functions.RXTable;
import java.util.List;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;
import org.jdesktop.swingx.prompt.PromptSupport;
import quoteregister.GuiIcon;

/**
 *
 * @author ldulka
 */

public class ClientGui extends javax.swing.JFrame {

    private static List<ClientObject> clients;
    private static List<ContactObject> contacts;
    private final DefaultTableModel clientTableModel;
    private final DefaultTableModel contactTableModel;
    private NewClientGui ncg;
    private ContactGui ctGui;
    private static String mouseReleased;

    /**
     * Creates new form ClientList
     */
    public ClientGui() {    
        super("Client list");
        initComponents();
        hideIDs();
        addListeners();
        setMinimumSize(getSize());
        GuiIcon ico = new GuiIcon(this);        
        
        PromptSupport.setPrompt("type to filter", Filter);
        
        clientTableModel = (DefaultTableModel) clientTable.getModel();
        contactTableModel = (DefaultTableModel) contactTable.getModel();
        
        refreshClientTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popUpClient = new javax.swing.JPopupMenu();
        editSelectedClient = new javax.swing.JMenuItem();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        contactTable = new Functions.RXTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        clientTable = new Functions.RXTable();
        Filter = new javax.swing.JTextField();

        editSelectedClient.setText("Edit Selected Item");
        editSelectedClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSelectedClientActionPerformed(evt);
            }
        });
        popUpClient.add(editSelectedClient);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/People.png"))); // NOI18N
        jButton1.setText("New Contact");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Briefcase.png"))); // NOI18N
        jButton2.setText("New Client");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        contactTable.setAutoCreateRowSorter(true);
        contactTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Client ID", "Given Name", "Last Name", "Phone", "Email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        contactTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                contactTableMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(contactTable);

        clientTable.setAutoCreateRowSorter(true);
        clientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Client", "Globe ID", "Contacts"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        clientTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                clientTableMouseReleased(evt);
            }
        });
        jScrollPane4.setViewportView(clientTable);
        if (clientTable.getColumnModel().getColumnCount() > 0) {
            clientTable.getColumnModel().getColumn(3).setPreferredWidth(40);
        }

        Filter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                FilterKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Filter))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Filter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        createNewClientGui(-1);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        createNewContactForClient(getSelectedClientID());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void editSelectedClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSelectedClientActionPerformed
        if(mouseReleased.equals("CLIENT")){
            createNewClientGui(clientTable.getSelectedRow());
        } else if (mouseReleased.equals("CONTACT")){
            editClientGui(contactTable.getSelectedRow());
        }

    }//GEN-LAST:event_editSelectedClientActionPerformed

    private void clientTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientTableMouseReleased
     
        int r = clientTable.rowAtPoint(evt.getPoint());
        if(r>=0 && r < clientTable.getRowCount()){
            clientTable.setRowSelectionInterval(r, r);            
        } else {
            clientTable.clearSelection();
        }
        
        if(evt.isPopupTrigger()){
            mouseReleased = "CLIENT";
            popUpClient.show(clientTable, evt.getX(), evt.getY());
        }
        
    }//GEN-LAST:event_clientTableMouseReleased

    private void contactTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contactTableMouseReleased
        int r = contactTable.rowAtPoint(evt.getPoint());
        if(r>=0 && r < contactTable.getRowCount()){
            contactTable.setRowSelectionInterval(r, r);            
        } else {
            contactTable.clearSelection();
        }
        
        if(evt.isPopupTrigger()){
            mouseReleased = "CONTACT";
            popUpClient.show(contactTable, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_contactTableMouseReleased

    private void FilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FilterKeyReleased
        setFilter(Filter.getText());
    }//GEN-LAST:event_FilterKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Filter;
    public Functions.RXTable clientTable;
    public Functions.RXTable contactTable;
    private javax.swing.JMenuItem editSelectedClient;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu popUpClient;
    // End of variables declaration//GEN-END:variables

    public void createNewClientGui(int selectedRow) {    
        if(!isGuiShowing(ncg)){
            ncg = new NewClientGui(this,selectedRow);
            createModalGui(ncg);
        }
    }

    private void createNewContactForClient(int selectedClientID) {
        if(!isGuiShowing(ctGui)){
            ctGui = new ContactGui(this,selectedClientID);
            if(selectedClientID>0)
                createModalGui(ctGui);   
        }              
    }
    
    private void editClientGui(int selectedRow) {
        if(!isGuiShowing(ctGui)){
            ctGui = new ContactGui(this,selectedRow,getSelectedClientID());
            if(selectedRow >= 0)
                createModalGui(ctGui);   
        }     
    }    
    
    public void refreshClientTable(){
        clients = ObjectCollector.getClients();
        CleanTable(clientTableModel);
        for (ClientObject client : clients) {  
            clientTableModel.addRow(new Object[]{client.getID(),
                                                 client.getClientName(),
                                                 client.getGlobeID(),
                                                 ObjectCollector.getContactsForClient(client.getID()).size()});
        }
    }

    private void CleanTable(DefaultTableModel model) {        
        for (int i = model.getRowCount()-1; i >=0 ; i--) {
            model.removeRow(i);
        }        
    }
    
    private void addListeners(){
        clientTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if(!lse.getValueIsAdjusting()){
                    //System.out.println("now");
                    if(clientTable.getSelectedRowCount()>0){                                        
                        displayContactsForClient(getSelectedClientID());
                    }
                }
            }
        });
    }       
    
    private int getSelectedClientID() {
        if(clientTable.getSelectedRow()>-1){
            return (Integer) clientTableModel.getValueAt(
                   clientTable.convertRowIndexToModel(clientTable.getSelectedRow()),
                    0);            
        }
        return 0;
    }  
    
    private void displayContactsForClient(int selectedClientID) {
        CleanTable(contactTableModel);        
        contacts = ObjectCollector.getContactsForClient(selectedClientID);
        refreshContactTable(contacts);
    }     

    void refreshContactTable(List<ContactObject> contacts) {
        CleanTable(contactTableModel);
        for (ContactObject contact : contacts) {
            contactTableModel.addRow(new Object[] {
                contact.getID(),
                contact.getClientID(),
                contact.getName(),
                contact.getLastName(),
                contact.getPhone(),
                contact.getEmail()
            });
        }
    }

    private void hideIDs() {
        Object[][] tables = new Object[][] {            
            {
                contactTable,new Object[]{"ID","Client ID"}
            },{
                clientTable,new Object[]{"ID"}
            }
        };
        try {
            columnRemover(tables);
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }

    private void columnRemover(Object[][] tables) throws Exception{
        for (Object[] table : tables) {
            if(table[0] instanceof RXTable){
                
                RXTable selectedTable = (RXTable) table[0];
                Object[] columns = (Object[]) table[1];
                if(columns.length<1){
                    throw new Exception("No columns to remove");
                }
                for (Object colName : columns) {
                    TableColumn column = selectedTable.getColumn(colName);
                    selectedTable.removeColumn(column);
                }
                
            } else {
                throw new Exception("first parameter must be table class");
            }
        }
    }
    
    private void setFilter(String text) {
        DefaultTableModel dm = (DefaultTableModel) clientTable.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel> (dm);
        clientTable.setRowSorter(tr);
        
        tr.setRowFilter(RowFilter.regexFilter("(?i)" + text));
    }    
    
}
