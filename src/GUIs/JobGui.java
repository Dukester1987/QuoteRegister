/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUIs;

import DBO.User;
import DO.AddressObject;
import DO.ClientObject;
import DO.ContactObject;
import DO.JobObject;
import DO.ObjectCollector;
import DO.ProductAllObject;
import Functions.Functions;
import Functions.TimeWrapper;
import java.sql.Date;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import org.jdesktop.swingx.JXTreeTable;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.jdesktop.swingx.prompt.PromptSupport;
import org.jdesktop.swingx.treetable.DefaultTreeTableModel;
import quoteregister.Gui;
import quoteregister.GuiIcon;
import quoteregister.TreeTableWrapper;

/**
 *
 * @author ldulka
 */
public class JobGui extends javax.swing.JFrame {

    private TreeTableWrapper wrapper;
    private JXTreeTable table;
    private int selectedRow;
    private int ADD_JOB = 1;
    private int EDIT_JOB = 2;
    private int action;
    private int newID = 0;
    private List<ClientObject> clients;
    private List<ContactObject> contacts;
    private boolean freezeListeners = false;
    private NewClientGui clientGui;
    private ContactGui contactGui;
    private JobObject Job;    
    private boolean WANID_MANDATORY = false;
    private List<User> users;
    private boolean writeDown;

    /**
     * Creates new form newJob
     */
    public JobGui() {
        initComponents();
        GuiIcon GuiIcon = new GuiIcon(this);
        this.action = ADD_JOB;
    }
    
    public JobGui(TreeTableWrapper wrapper) {
        super("New Job");
        this.wrapper = wrapper;
        initComponents();       
        startUp();
        GuiIcon GuiIcon = new GuiIcon(this);
        this.action = ADD_JOB;
        
        System.out.println("Starting up new job");
    }    

    public JobGui(TreeTableWrapper wrapper, int selectedRow) {
        super("Edit Job");
        this.wrapper = wrapper;
        this.selectedRow = selectedRow;
        this.table = wrapper.getTable();        
        
        initComponents();        
        startUp();
        initValues();
        
        GuiIcon GuiIcon = new GuiIcon(this);        
        this.action = EDIT_JOB;
        jButton1.setText("Edit");
        
        System.out.println("Starting up editing of job");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jobOwner = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        client = new javax.swing.JComboBox<>();
        contact = new javax.swing.JComboBox<>();
        addContact = new javax.swing.JButton();
        addClient = new javax.swing.JButton();
        verbalQuotes = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        JobID = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        Internal = new javax.swing.JCheckBox();
        jSpinner1 = new javax.swing.JSpinner();
        suffix = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        endDate = new com.toedter.calendar.JDateChooser();
        startDate = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        status = new javax.swing.JComboBox<>();
        WANID = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        notes = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        Street = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        GlobeID3 = new javax.swing.JTextField();
        Zip = new javax.swing.JTextField();
        State = new javax.swing.JComboBox<>();
        City = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Client Detials"));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.add(jobOwner, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 90, -1));

        jLabel2.setText("Client:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 90, -1, -1));

        jLabel6.setText("Contact:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, -1, -1));

        client.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientActionPerformed(evt);
            }
        });
        jPanel1.add(client, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, 230, -1));

        contact.setEnabled(false);
        jPanel1.add(contact, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, 230, -1));

        addContact.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Create16.png"))); // NOI18N
        addContact.setEnabled(false);
        addContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addContactActionPerformed(evt);
            }
        });
        jPanel1.add(addContact, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 120, -1, -1));

        addClient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Create16.png"))); // NOI18N
        addClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addClientActionPerformed(evt);
            }
        });
        jPanel1.add(addClient, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 90, -1, -1));

        verbalQuotes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "E-Mail", "Phone", "Verbal" }));
        jPanel1.add(verbalQuotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 90, -1));

        jLabel3.setText("Verbal Quotes:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        jLabel14.setText("Job Owner:");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        JobID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JobIDKeyReleased(evt);
            }
        });
        jPanel1.add(JobID, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 30, 95, -1));

        jLabel15.setText("JobID:");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, -1, -1));

        Internal.setText("Internal");
        jPanel1.add(Internal, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 60, -1, -1));
        jPanel1.add(jSpinner1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 30, -1, -1));
        jPanel1.add(suffix, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 50, -1));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/ok16.png"))); // NOI18N
        jButton1.setText("Insert");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Exit16.png"))); // NOI18N
        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Dates & Status"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setText("Start Date:");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        jLabel5.setText("End Date:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        endDate.setDate(new java.util.Date());
        jPanel2.add(endDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 60, -1, -1));

        startDate.setDate(new java.util.Date());
        jPanel2.add(startDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, -1, -1));

        jLabel7.setText("WAN:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, -1, -1));

        status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Recieved", "Approved", "Waiting for answer", "Canceled", "WON" }));
        status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusActionPerformed(evt);
            }
        });
        jPanel2.add(status, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, 90, -1));

        WANID.setEnabled(false);
        WANID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                WANIDKeyReleased(evt);
            }
        });
        jPanel2.add(WANID, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 60, 95, -1));

        jLabel13.setText("Status:");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, -1, -1));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Notes"));

        notes.setColumns(20);
        notes.setRows(5);
        jScrollPane1.setViewportView(notes);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Address"));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setText("Street:");
        jPanel4.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 22, -1, -1));
        jPanel4.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 36, -1, -1));

        Street.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                StreetKeyReleased(evt);
            }
        });
        jPanel4.add(Street, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 20, 320, -1));

        jLabel10.setText("City:");
        jPanel4.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        jLabel11.setText("State:");
        jPanel4.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(173, 53, -1, -1));

        jLabel12.setText("ZIP:");
        jPanel4.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        GlobeID3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                GlobeID3KeyReleased(evt);
            }
        });
        jPanel4.add(GlobeID3, new org.netbeans.lib.awtextra.AbsoluteConstraints(499, 76, 95, -1));

        Zip.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ZipKeyReleased(evt);
            }
        });
        jPanel4.add(Zip, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 95, -1));

        State.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NSW", "VIC", "QLD", "WA", "SA", "TAS", "ACT", "NT" }));
        jPanel4.add(State, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 50, -1, -1));

        City.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                CityKeyReleased(evt);
            }
        });
        jPanel4.add(City, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 95, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            prepareNewJobObject();          
            if(wrapper.getOptionDialog("Do you want to add Product for this job?", "Question")==JOptionPane.YES_OPTION){
                wrapper.createNewPoductRate(Job);
            };
            wrapper.refreshTable();
            this.dispose();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage(), "Exception", JOptionPane.WARNING_MESSAGE);
        }        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void StreetKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_StreetKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_StreetKeyReleased

    private void WANIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_WANIDKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_WANIDKeyReleased

    private void GlobeID3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_GlobeID3KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_GlobeID3KeyReleased

    private void ZipKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ZipKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_ZipKeyReleased

    private void clientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientActionPerformed
        if(!freezeListeners)
            updateContactList();
    }//GEN-LAST:event_clientActionPerformed

    private void addClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClientActionPerformed
        createNewClient();
    }//GEN-LAST:event_addClientActionPerformed

    private void addContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addContactActionPerformed
        createNewContact();
    }//GEN-LAST:event_addContactActionPerformed

    private void statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusActionPerformed
        checkSelectedStatus();        
    }//GEN-LAST:event_statusActionPerformed

    private void CityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CityKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_CityKeyReleased

    private void JobIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JobIDKeyReleased
        writeDown = Functions.checkIntForTextField(JobID);
    }//GEN-LAST:event_JobIDKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField City;
    private javax.swing.JTextField GlobeID3;
    private javax.swing.JCheckBox Internal;
    private javax.swing.JTextField JobID;
    private javax.swing.JComboBox<String> State;
    private javax.swing.JTextField Street;
    private javax.swing.JTextField WANID;
    private javax.swing.JTextField Zip;
    private javax.swing.JButton addClient;
    private javax.swing.JButton addContact;
    private javax.swing.JComboBox<ClientObject> client;
    private javax.swing.JComboBox<ContactObject> contact;
    private com.toedter.calendar.JDateChooser endDate;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JComboBox<User> jobOwner;
    private javax.swing.JTextArea notes;
    private com.toedter.calendar.JDateChooser startDate;
    private javax.swing.JComboBox<String> status;
    private javax.swing.JTextField suffix;
    private javax.swing.JComboBox<String> verbalQuotes;
    // End of variables declaration//GEN-END:variables

    private void prepareNewJobObject() throws Exception {
        //let magic happened
        
        writeDown = Functions.checkIntForTextField(JobID);                
        
        if(!writeDown)
            throw new Exception("Job ID must be a number");        
        
        String Quotes = verbalQuotes.getSelectedItem().toString();        
        newID = Integer.parseInt(JobID.getText());    
        List<JobObject> jobs = ObjectCollector.getJobs();
        if(jobs.stream().anyMatch(p -> p.getJobID()==newID)){
            System.out.println("okay there is another match for this Job ID");
            if(jobs.stream().anyMatch(p -> p.getSuffix().equalsIgnoreCase(suffix.getText()))){
                System.out.println("okay there is also suffix for this JobID exists in a database");
                System.out.println("JobID of eddited JOB IS:");
                if(Job==null || Job.getOldJobID()!=newID || !Job.getOldSuffix().equalsIgnoreCase(suffix.getText())){              
                    throw new Exception("Job with this number already exists in DB");
                }
            }
        }         
        
        ClientObject Client = (ClientObject) client.getSelectedItem();
        if(Client==null)
            throw new Exception("Client needs to be set");       
        
        ContactObject Contact = (ContactObject) contact.getSelectedItem();        
        if(Contact==null)
            throw new Exception("Contact needs to be set");
        
        if(Contact.getClientID()!=Client.getID())
            throw new Exception("Selected contact doesn't belong to the client "+Contact.getClientID()+" "+Client.getID());
        
        if(WANID_MANDATORY && WANID.getText().isEmpty())
            throw new Exception("WAN ID needs to be set when Status is approved");
        
        
        AddressObject Delivery = new AddressObject(Street.getText(), City.getText(),Zip.getText(),State.getSelectedItem().toString());
        Date dateQuoted = new Date(System.currentTimeMillis());
        Date startDate = TimeWrapper.setDate(this.startDate.getDate());
        Date endDate = TimeWrapper.setDate(this.endDate.getDate());
        String Notes = notes.getText();
        String Status = this.status.getSelectedItem().toString();        
        String username = Gui.getDB().userData.getLoginName().substring(0, 2)+"-"+newID;           
        String WANID = this.WANID.getText();
        String sfx = this.suffix.getText();
        
        //Create JobObject
        if(Job!=null) {
            if(Job.getJobID()!=newID){ //Job ID changed
                //change jobID to new one for all products
                try{
                    List<ProductAllObject> products = ObjectCollector.getProductRates();
                    for (ProductAllObject product : products) {
                        if(product.getJobID()==Job.getJobID()){
                            if(product.getAddress().getState()!=null){
                                product.setJobID(newID);
                                System.out.println(newID);
                                product.dbUpdate();
                                System.out.println("updating product "+product.toString());
                            } else {
                                throw new Exception("Address missing for product fill at leaset State to continue");
                            }
                        }
                    }
                }catch (Exception e){
                    throw new Exception("Products are incompatible, please edit product first!");
                }
            }                        
            Job.editObject(newID, Job.getUser(), Quotes, Status, dateQuoted, startDate, endDate, Client, Contact, Delivery, Notes, WANID,Internal.isSelected(),sfx);
            Job.dbUpdate();            
        } else {      
            System.out.println("saving job user is: "+jobOwner.getSelectedItem());
            Job = new JobObject(newID, (User) jobOwner.getSelectedItem(), Quotes, Status, dateQuoted, startDate, endDate, Client, Contact, Delivery, Notes, WANID,Internal.isSelected(),sfx);
            ObjectCollector.addJob(Job);
            System.out.println(newID);
            Job.dbSave();
        }        
        //sreturn Job.getTreeTableObject();     
    }

    private void initValues() {                     
        newID = (int) getValue(1);
        String sfix = (String) getValue(20);
        
        JobID.setText(Integer.toString(newID));        
        //JobID.setEnabled(false);
        Job = ObjectCollector.getJobByID(newID,sfix);
        suffix.setText(Job.getSuffix());        
        status.setSelectedItem(Job.getStatus());
        jobOwner.setSelectedItem(Job.getUser());
        jobOwner.setEnabled(false);
        verbalQuotes.setSelectedItem(Job.getQuote());        
        startDate.setDate(Job.getStartDate());
        endDate.setDate(Job.getEndDate());
        client.setSelectedItem(Job.getClient());  
        Street.setText(Job.getAddress().getStreet());
        City.setText(Job.getAddress().getCity());
        Zip.setText(Job.getAddress().getZip());
        State.setSelectedItem(Job.getAddress().getState());
        contact.setSelectedItem(Job.getContact());        
        notes.setText(Job.getNotes());
        WANID.setText(Job.getWANID());
        Internal.setSelected(Job.isInternal());
    }
    
    private Object getValue(int Column){
        Object node = wrapper.getNodeFromRow(selectedRow);
        DefaultTreeTableModel model = (DefaultTreeTableModel) table.getTreeTableModel();
        return model.getValueAt(node, Column);        
    }  
    
    private void refreshClients(){
        freezeListeners = true;        
        clients = ObjectCollector.getClients();
        client.removeAllItems(); //housekeeping
        for (ClientObject cl : clients) {
            client.addItem(cl);
        }
        checkSelectedStatus();    
        freezeListeners = false;
    }

    private void startUp() {
        JobID.setText(Integer.toString(ObjectCollector.getNextJobID()));
        AutoCompleteDecorator.decorate(client);
        AutoCompleteDecorator.decorate(contact);
        AutoCompleteDecorator.decorate(jobOwner);
        PromptSupport.setPrompt("suffix", suffix);
        PromptSupport.setPrompt("Street", Street);
        PromptSupport.setPrompt("City", City);
        PromptSupport.setPrompt("ZIP", Zip);
        
        users = ObjectCollector.getUsersForList();        
        addUsersToDropDown(users,jobOwner);                
        refreshClients();        
        //contacts = ObjectCollector.getContacts();
    }

    private void updateContactList() {
        ClientObject cl = (ClientObject) client.getSelectedItem();
        if(cl.getID()>0){
            addContact.setEnabled(true);
            List<ContactObject> co = ObjectCollector.getContactsForClient(cl.getID());
            if(!co.isEmpty()){
                contact.setEnabled(true);
                refreshContactList(co);
            } else {
                contact.setEnabled(false);
            }
        } else {
            addContact.setEnabled(false);
        }
    }

    public void refreshContactList(List<ContactObject> co) {
        contact.removeAllItems();
        for (ContactObject contactObject : co) {
            contact.addItem(contactObject);
        }
    }
    
    void refreshContactList(List<ContactObject> cfc, ContactObject co) {
        refreshContactList(cfc);
        contact.setSelectedItem(co);
    }    

    private void createNewClient() {
        if(!Functions.isGuiShowing(clientGui)){
            clientGui = new NewClientGui(this);
            Functions.createModalGui(new NewClientGui(this));            
        }
    }

    void refreshClientList(ClientObject co) {
        refreshClients();
        client.setSelectedItem(co);
    }

    private void createNewContact() {
        if(!Functions.isGuiShowing(contactGui)){        
            ClientObject co = (ClientObject) client.getSelectedItem();
            contactGui = new ContactGui(this,co.getID());
            Functions.createModalGui(new ContactGui(this,co.getID()));
        }
    }

    private void checkSelectedStatus() {
        if(status.getSelectedItem().toString().equalsIgnoreCase("Approved")){
            WANID.setEnabled(true);            
            WANID_MANDATORY = true;
        } else {
            WANID.setEnabled(false);
            WANID_MANDATORY = false;
        }        
    }

    private void addUsersToDropDown(List<User> users, JComboBox<User> jobOwner) {
        jobOwner.removeAllItems();
        for (User user : users) {
            jobOwner.addItem(user);
        }        
        jobOwner.setSelectedItem(ObjectCollector.getUserByID(Gui.db.userData.getId()));
        System.out.println("Selected user should be "+ Gui.db.userData);
    }

}
